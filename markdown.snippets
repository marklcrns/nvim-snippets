# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt

global !p
import os, re
from datetime import datetime, timedelta, date

# Make all multi-line placeholder strings jumpable.
def create_matrix_placeholders(snip):
	# Create anonymous snippet body
	anon_snippet_body = ""

	# Get start and end line number of expanded snippet
	start = snip.snippet_start[0]
	end = snip.snippet_end[0]

  # Append current line into anonymous snippet
	for i in range(start, end + 1):
		anon_snippet_body += snip.buffer[i]
		anon_snippet_body += "" if i == end else "\n"

	# Delete expanded snippet line till second to last line
	for i in range(start, end):
		del snip.buffer[start]

	# Empty last expanded snippet line while preserving the line
	snip.buffer[start] = ''

	# Expand anonymous snippet
	snip.expand_anon(anon_snippet_body)


def get_last_header_idx(snip):
	# Get start of snippet line number
	start = snip.snippet_start[0]

	# Append current line into anonymous snippet
	for i in reversed(range(start, len(snip.buffer))):
		if (snip.buffer[i].find('#') == 0):
			return (snip.buffer[i], i)
	
	return ("", 0)

def get_last_footnote_link(header_idx):
	for i in range(header_idx, len(snip.buffer)):
		footnote = re.match("(^\[\^(\d|\w+)\])", snip.buffer[i])
		if (footnote):
			return footnote.group(1)
	
	return ""
	

endglobal


snippet h1 "Header 1" bA
# $1
$0
endsnippet

snippet h2 "Header 2" bA
## $1
$0
endsnippet

snippet h3 "Header 3" bA
### $1
$0
endsnippet

snippet h4 "Header 4" bA
#### $1
$0
endsnippet

snippet h5 "Header 5" bA
##### $1
$0
endsnippet

snippet h6 "Header 6" bA
###### $1
$0
endsnippet

snippet '(.+)?fen' "Fenced code block" rbA
\`\`\``!p snip.rv = "" if match.group(1) == None else match.group(1)`
${0:${VISUAL}}
\`\`\`
endsnippet

snippet mcom "Markdown comment" bA
[$1]: # $0
endsnippet

snippet hcom "Markdown comment" bA
<!--- $1 --->$0
endsnippet

snippet br "Markdown breakline" w
<br>
endsnippet

snippet l "Link tag"
[${1:${VISUAL}}]($0)
endsnippet

snippet fi "Image tag for files" w
![${1:${VISUAL}}](../../../$0)
endsnippet

snippet i "Image tag for urls" w
![${1:${VISUAL}}]($2)
endsnippet

snippet ie "Clickable Image link" w
[![${1:${VISUAL}}](${2:path/to/image})](${3:redirect-link} "${4:Alt}")
endsnippet

snippet ih "HTML Image link" w
<img src="${1:path/to/image}" width="${2:500px}" alt="${3:alt}">
endsnippet

snippet a "Markdown anchor link" w
[#${1:${VISUAL}}]($0#$1)
endsnippet

snippet ve "YouTube Video link with embedded image" w
[ðŸ“º ${1:${VISUAL}}]($2)$0

[<img src="https://img.youtube.com/vi/${2/.*(watch\?v=|\/embed\/)([a-zA-Z0-9-_]*)((&|\/|)?.*)?/$2/}/0.jpg" alt="$1" width="200"/>](https://www.youtube.com/embed/${2/.*(watch\?v=|\/embed\/)([a-zA-Z0-9-_]*)((&|\/|)?.*)?/$2//$1/} "$1")
endsnippet

post_jump "create_matrix_placeholders(snip)"
snippet vef "YouTube Video link with embedded image for html" w
`!p
head, idx = get_last_header_idx(snip)

res = ""
last_footnote_idx = 0
if head != "" and idx != 0:
	footnote = get_last_footnote_link(idx)
	if footnote != "":
		match = re.match("(^\[\^(\d+)\])", str(footnote))
		last_footnote_idx = int(match.group(2)) if match else 0

last_footnote_idx += 1

res = "**${1:TITLE}**[^" + str(last_footnote_idx) + "]$0\n"
res += '<iframe width="420" height="315" src="https://www.youtube.com/embed/${2/.*(watch\?v=|\/embed\/)([a-zA-Z0-9-_]*)((&|\/|)?.*)?/$2/}"></iframe>'
res += "\n\n[^" + str(last_footnote_idx) + "]: ${2:VIDEO_URL} ($1)\n"
snip.rv = res
`
endsnippet

snippet anc "Html anchor" bA
<a name="${1:${VISUAL}}">$2</a>
endsnippet

snippet pre "Html code block tag" w
<pre>
$0
</pre>
endsnippet

snippet kbd "Markdown key bindings tag" w
<kbd>${1:${VISUAL}}</kbd>$0
endsnippet

snippet mbo "Markdown Bold tag" w
**${1:${VISUAL}}**$0
endsnippet

snippet mit "Markdown Italic tag" w
_${1:${VISUAL}}_$0
endsnippet

snippet hbo "Html bold tag" w
<b>${1:${VISUAL}}</b>$0
endsnippet

snippet hit "Html italic tag" w
<i>${1:${VISUAL}}</i>$0
endsnippet

snippet meta "Metadata template" b
---
title: ${1:(Insert Title Here)}
author: ${2:Mark Lucernas}
date: `date '+%Y-%m-%d'`
summary: $3
---


$0
endsnippet


snippet cbox "Markdown checkbox" w
- [ ] $0
endsnippet

# DEPRECATED
# snippet ntemp "Neuron metadata template" b
# slug: $1
# title: ${1/(-)?([a-zA-Z0-9]+)/(?1: )\u$2/g}
# tags:
# 	- wip
# 	- $1
# 	- $0
# endsnippet

snippet ntemp "Neuron metadata template" b
title: $1
slug: ${1/(^[^a-zA-Z]+)?([a-zA-Z0-9.-]+)(\s*)/\L$2(?3:-)\E/g}
tags:
	- wip
	- ${1/(^[^a-zA-Z]+)?([a-zA-Z0-9.-]+)(\s*)/\L$2(?3:-)\E/g}
	- $0
endsnippet

post_jump "create_matrix_placeholders(snip)"
snippet '(\d+)([cC]{1,2})?t' "Markdown table (n)t" br
`!p
t_column_ct = int(match.group(1))
flags = match.group(2) if match.group(2) != None else ""

t_head = "| $0  "
t_sep = "|:-:" if 'C' in flags else "|---"
t_cell = "|   "

t_header = t_head + (t_cell * (t_column_ct - 1)) + "|"
t_sep = t_sep + (t_sep * (t_column_ct - 1)) + "|"
t_body = t_cell + (t_cell * (t_column_ct - 1)) + "|"

result = t_header + "\n" + t_sep + "\n" + t_body

if 'c' in flags:
	result = "<center>\n\n" + result + "\n\n</center>\n"

snip.rv = result
`
endsnippet
