global !p
import os, re

# Make all multi-line placeholder strings jumpable.
def create_matrix_placeholders(snip):
	# Create anonymous snippet body
	anon_snippet_body = ""

	# Get start and end line number of expanded snippet
	start = snip.snippet_start[0]
	end = snip.snippet_end[0]

  # Append current line into anonymous snippet
	for i in range(start, end + 1):
		anon_snippet_body += snip.buffer[i]
		anon_snippet_body += "" if i == end else "\n"

	# Delete expanded snippet line till second to last line
	for i in range(start, end):
		del snip.buffer[start]

	# Empty last expanded snippet line while preserving the line
	snip.buffer[start] = ''

	# Expand anonymous snippet
	snip.expand_anon(anon_snippet_body)

def create_matrix(cols, rows, sep, start, end):
	res = ""
	placeholder = 1
	for _ in range(0, int(rows)):
		res += start + f"${placeholder}"
		placeholder += 1
		for _ in range(0, int(cols) - 1):
			res += sep + f"${placeholder}"
			placeholder += 1
		res += end
	return res[:-1]

# LaTeX matrix dictionary
boundaries = {
	"b": ["[", "]"],
	"B": ["\\\{", "\\\}"],
	"p": ["(", ")"],
	"v": ["|", "|"],
	"V": ["||", "||"]
}
endglobal

# Symbols (Relations)
# ============================================================

snippet <= "LaTeX less than or equals to" iA
\leq
endsnippet

snippet >= "LaTeX greater than or equals to" iA
\geq
endsnippet

snippet >> "LaTeX much greater than" iA
\gg
endsnippet

snippet << "LaTeX muchn less than" iA
\ll
endsnippet

snippet != "LaTeX not equals to" iA
\neq
endsnippet

snippet ~~ "LaTeX approximation symbol" iA
\approx
endsnippet

snippet ~= "LaTeX congruent symbol" iA
\cong
endsnippet

snippet -= "LaTeX equivalent symbol" iA
\equiv
endsnippet

snippet => "LaTeX implies symbol" iA
\implies
endsnippet

snippet =< "LaTeX implied by symbol" iA
\impliedby
endsnippet

snippet def= "Latex define equal symbol" iA
\overset{\underset{\mathrm{def}}{}}{=}
endsnippet

snippet oc "LaTeX proportional to symbol" i
\propto
endsnippet

snippet 'iff' "LaTeX if and only if symbol" i
\iff
endsnippet

snippet psub "Latex proper subset symbol" i
\subset
endsnippet

snippet npsub "Latex not a proper subset symbol" i
\not\subset
endsnippet

snippet sub "Latex subset symbol" i
\subseteq
endsnippet

snippet nsub "Latex not a subset symbol" i
\not\subseteq
endsnippet

snippet sup "Latex superset symbol" i
\superset
endsnippet

snippet nsup "Latex not a superset symbol" i
\not\superset
endsnippet

snippet !0 "Latex emptyset symbol" i
\emptyset
endsnippet

snippet in "Latex in symbol" w
\in
endsnippet

snippet nin "Latex not in symbol" i
\not\in
endsnippet

snippet ni "Latex in reverse symbol" w
\ni
endsnippet

snippet nin "Latex not in reverse symbol" i
\not\ni
endsnippet

# Exponents, Superscript, Subscript
# ============================================================

# Auto exponent/superscript
# Matches ^ followed by pattern of characters using negative lookbehind
snippet '((?<=[a-zA-Z0-9]|\)|\}|\])|(?<=sin|cos|tan|csc|sec|cot))\^' "LaTeX auto exponent/superscript" irA
^{$1}$0
endsnippet

snippet '((?<=[a-zA-Z0-9]|\)|\}|\])|(?<=sin|cos|tan|csc|sec|cot))_' "LaTeX auto subscript" irA
_{$1}$0
endsnippet

# Math
# ============================================================

# Usage:
# f// -> \frac{$1}{$2}$0
# df// -> \dfrac{$1}{$2}$0
# tf// -> \tfrac{$1}{$2}$0
snippet '(d|t)?f//' "LaTeX normal/display/textstyle fraction" riA
`!p
snip.rv = "\\" if match.group(1) == None else "\\" + match.group(1)
`frac{${1:${VISUAL}}}{$2}$0
endsnippet

# Usage:
# b// -> \binom{$1}{$2}$0
snippet b// "LaTeX symbol binomial coefficient" iA
\binom{${1:${VISUAL}}}{$2}$0
endsnippet

# Usage:
# abc/f/ -> \frac{abc}{$0}
# (abc)/f/ -> \frac{abc}{$0}
snippet '(\()?(.*)(\))?/f/' "LaTeX () auto fraction" wrA
\frac{`!p snip.rv = match.group(2)`}{$0}
endsnippet

# Usage:
# abc/b/ -> \binom{abc}{$0}
# (abc)/b/ -> \binom{abc}{$0}
snippet '(\()?(.*)(\))?/b/' "LaTeX () auto binomial" wrA
\binom{`!p snip.rv = match.group(2)`}{$0}
endsnippet

snippet sqrt "LaTeX square root" iA
\sqrt{${1:${VISUAL}}}$0
endsnippet

snippet '(\d+|n|x|y|z)root' "LaTeX root of n" irA
\sqrt[`!p snip.rv = match.group(1)`]{$1}$0
endsnippet

# Logarthmic function
snippet '(log|ln)([a-zA-Z0-9]{1,5})?' "LaTeX Logarithmic function" rw
`!p
log = match.group(1)
base = "_{" + match.group(2) + "}" if match.group(2) else ""
snip.rv = "\\" + log + base`($1)$0
endsnippet

snippet oo "LaTeX infinity" i
\infty
endsnippet

snippet NN "Latex large intersection" i
\bigcap_{${1:i \in ${2: I}}} $0
endsnippet

snippet UU "Latex large union" i
\bigcup_{${1:i \in ${2: I}}} $0
endsnippet

snippet 'setm' "Latex set minus" i
\setminus
endsnippet

snippet comp "LaTeX complement" i
^{c}
endsnippet

snippet inv "LaTeX inverse" i
^{-1}
endsnippet

snippet ang "LaTeX angle symbol" i
\angle{$1}$0
endsnippet

snippet int "Latex integration" w
\int${1:_{${2:-\infty}}^{${3:\infty}}} ${4:${5:f(x)}\;dx}$0
endsnippet

snippet dint "LaTeX displaystyle integral" w
{\displaystyle \int${1:_{${2:-\infty}}^{${3:\infty}}} ${4:${5:f(x)}\;dx}}$0
endsnippet

snippet sum "LaTeX summation" w
\sum${1:_{${2:i} = ${3:1}}^{${4:n}}} ${5:${6:f(${7:x_{i}})}\;${8:\Delta{x}}}$0
endsnippet

snippet lim "Latex limit" i
\lim${1:_{${2:n} \to ${3:\infty}}} ${4:${5:f(x)} = ${6:x}}$0
endsnippet

snippet reim "LaTeX Reiman sum" w
\lim_{${1:n} \to ${2:\infty}} \sum_{${3:i} = ${3:1}}^{${4:n}} ${5:${6:f(${7:x_{i}})}${8:\Delta{x}}}$0
endsnippet

snippet lims "Latex limit superior" w
\limsup_{${1:n} \to ${2:\infty}}
endsnippet

snippet prod "Latex product" w
\prod${1:_{${2:n=${3:1}}}^{${4:\infty}}} ${5:${VISUAL}}$0
endsnippet

snippet pder "Latex partial derivative" w
\frac{\partial ${1:V}}{\partial ${2:x}}$0
endsnippet

snippet der "Latex derivative" w
\frac{d${1:V}}{d${2:x}}$0
endsnippet

snippet _} "LaTeX underbrace" iA
\underbrace{${1:${VISUAL}}}$0
endsnippet

snippet ^} "LaTeX overbrace" iA
\overbrace{${1:${VISUAL}}}$0
endsnippet

snippet PP "LaTeX prime numbers" i
\mathbb{P}
endsnippet

snippet NN "LaTeX natural numbers" i
\mathbb{N}
endsnippet

snippet ZZ "LaTeX integer numbers" i
\mathbb{Z}
endsnippet

snippet WW "LaTeX whole numbers" i
\mathbb{W}
endsnippet

snippet II "LaTeX irrational numbers" i
\mathbb{I}
endsnippet

snippet QQ "LaTeX rational numbers" i
\mathbb{Q}
endsnippet

snippet RR "LaTeX real numbers" i
\mathbb{R}
endsnippet

snippet CC "LaTeX complex numbers" i
\mathbb{C}
endsnippet

snippet SS "LaTeX section" i
\S
endsnippet

snippet iE "LaTeX exists" i
\exists
endsnippet

snippet iA "LaTeX forall" i
\forall
endsnippet

snippet xx "LaTeX cross" i
\times
endsnippet

snippet tf "LaTeX therefore symbol" i
\therefore
endsnippet

snippet bc "LaTeX because symbol" i
\because
endsnippet

snippet to "to" i
\to
endsnippet

snippet mto "mapsto" i
\mapsto
endsnippet

snippet .c "LaTeX cdot" iA
\cdot
endsnippet

snippet ..c "LaTeX center dots" iA
\cdots
endsnippet

snippet ..l "LaTeX lower dots" iA
\ldots
endsnippet

snippet ..v "LaTeX vertical dots" iA
\vdots
endsnippet

snippet ..d "LaTeX diagonal dots" iA
\ddots
endsnippet

snippet ' "LaTeX prime" i
^{\prime}
endsnippet

snippet '' "LaTeX double prime" i
^{\prime \prime}
endsnippet

snippet ~ "LaTeX ~ symbol" i
\sim
endsnippet

snippet vec "LaTeX vector" i
\vec{${1:${VISUAL}}}$0
endsnippet

snippet 'det' "LaTeX determinant" i
\det $0
endsnippet

snippet mag "LaTeX vector's magnitude" i
\\|${1:${VISUAL}}\\|$0
endsnippet

snippet hat "LaTeX hat" i
\hat{${1:${VISUAL}}}$0
endsnippet

snippet || "LaTeX parallel sign" i
\parallel
endsnippet

snippet | "LaTeX mid sign" i
\mid
endsnippet

snippet n| "LaTeX not mid sign" i
\nmid
endsnippet

snippet '(\d+)?(a)?((sin|cos|tan|csc|sec|cot)h?)(\d+[a-zA-Z0-9]*|[a-zA-Z]+|-)?' "LaTeX trig functions" r
`!p
# Constants
mult = "" if match.group(1) == None else match.group(1)
# Arc functions
if match.group(2) == 'a':
	arc = "arc"
else:
	arc = ""
# Apply sech and csch workaround to trig function
if (match.group(3) == "sech" or match.group(3) == "csch"):
	trig = "operatorname{" + match.group(3) + "}"
else:
	trig = match.group(3)
# Negative functions
if match.group(5) == None:
	expo = ""
elif match.group(5) == "-":
	expo = "^{-1}"
else:
	expo = "^{" + match.group(5) + "}"

snip.rv = mult + "\\" + arc + trig + expo
`($1)$0
endsnippet

# Symbols (Arrows)
# ============================================================

snippet Ua "LaTeX double lined uparrow" i
\Uparrow
endsnippet

snippet Da "LaTeX double lined downarrow" i
\Downarrow
endsnippet

snippet Uda "LaTeX double lined updownarrow" i
\Updownarrow
endsnippet

snippet La "LaTeX double lined leftarrow" i
\Leftarrow
endsnippet

snippet Ra "LaTeX double lined rightarrow" i
\Rightarrow
endsnippet

snippet Lra "LaTeX double lined leftrightarrow" i
\Leftrightarrow
endsnippet

snippet Lal "LaTeX double lined long leftarrow" i
\Longleftarrow
endsnippet

snippet Ral "LaTeX double lined long rightarrow" i
\Longrightarrow
endsnippet

snippet Lral "LaTeX double lined long leftrightarrow" i
\Longleftrightarrow
endsnippet

snippet da "LaTeX single lined downarrow" i
\downarrow
endsnippet

snippet uda "LaTeX single lined updownarrow" i
\updownarrow
endsnippet

snippet la "LaTeX single lined leftarrow" i
\leftarrow
endsnippet

snippet ra "LaTeX single lined rightarrow" i
\rightarrow
endsnippet

snippet lra "LaTeX single lined leftrightarrow" i
\leftrightarrow
endsnippet

snippet lal "LaTeX long single lined leftarrow" i
\longleftarrow
endsnippet

snippet ral "LaTeX long single lined rightarrow" i
\longrightarrow
endsnippet

snippet lral "LaTeX long single lined leftrightarrow" i
\Longleftrightarrow
endsnippet

snippet ^la "LaTeX overset left arrow" iA
\overset{$1}\leftarrow$0
endsnippet

snippet _la "LaTeX underset left arrow" iA
\underset{$1}\leftarrow$0
endsnippet

snippet ^ra "LaTeX overset right arrow" iA
\overset{$1}\rightarrow$0
endsnippet

snippet _ra "LaTeX underset right arrow" iA
\underset{$1}\rightarrow$0
endsnippet

# Symbols (Logic)
# ============================================================

snippet '(?<=[a-zA-Z0-9])cir' "LaTeX auto degrees symbol" irA
^{\circ}
endsnippet

snippet cir "LaTeX degrees symbol" i
\circ
endsnippet

snippet nn "Latex intersection symbol" i
\cap
endsnippet

snippet uu "Latex union symbol" i
\cup
endsnippet

# Symbols (Misc)
# ============================================================

snippet '(\+-|-\+)' "LaTeX plus minus sign" irA
\pm
endsnippet

snippet nab "Latex inverted delta greek symbol" i
\nabla
endsnippet

snippet suitc "LaTeX club suit symbol" i
\clubsuit
endsnippet

snippet suith "LaTeX heart suit symbol" i
\heartsuit
endsnippet

snippet suits "LaTeX spade suit symbol" i
\spadesuit
endsnippet

snippet suitd "LaTeX diamond suit symbol" i
\diamondsuit
endsnippet

# Symbols (Greek)
# ============================================================

snippet alp "LaTeX alpha symbol" i
\alpha
endsnippet

snippet bet "LaTeX beta symbol" i
\beta
endsnippet

snippet del "LaTeX delta symbol" i
\delta
endsnippet

snippet eps "LaTeX epsilon symbol" i
\epsilon
endsnippet

snippet veps "LaTeX varepsilon symbol" i
\varepsilon
endsnippet

snippet zet "LaTeX zeta symbol" i
\zeta
endsnippet

snippet eta "LaTeX eta symbol" i
\eta
endsnippet

snippet the "LaTeX theta symbol" i
\theta
endsnippet

snippet vthe "LaTeX vartheta symbol" i
\vartheta
endsnippet

snippet gam "LaTeX gamma symbol" i
\gamma
endsnippet

snippet kap "LaTeX gamma symbol" i
\kappa
endsnippet

snippet lam "LaTeX lambda symbol" i
\lambda
endsnippet

snippet mu "LaTeX mu greek symbol" i
\mu
endsnippet

snippet nu "LaTeX nu greek symbol" i
\nu
endsnippet

snippet xi "LaTeX xi greek symbol" i
\xi
endsnippet

snippet pi "LaTeX pi greek symbol" i
\pi
endsnippet

snippet vpi "LaTeX varpi greek symbol" i
\varpi
endsnippet

snippet rho "LaTeX rho greek symbol" i
\rho
endsnippet

snippet vrho "LaTeX phi greek symbol" i
\varrho
endsnippet

snippet sig "LaTeX sigma greek symbol" i
\sigma
endsnippet

snippet vsig "LaTeX varsigma greek symbol" i
\varsigma
endsnippet

snippet tau "LaTeX tau greek symbol" i
\tau
endsnippet

snippet ups "LaTeX upsilon greek symbol" i
\upsilon
endsnippet

snippet phi "LaTeX phi greek symbol" i
\phi
endsnippet

snippet vphi "LaTeX varphi greek symbol" i
\varphi
endsnippet

snippet chi "LaTeX chi greek symbol" i
\chi
endsnippet

snippet psi "LaTeX psi greek symbol" i
\psi
endsnippet

snippet ome "LaTeX omega greek symbol" i
\omega
endsnippet

snippet Gam "LaTeX Gamma greek symbol" i
\Gamma
endsnippet

snippet Del "LaTeX Delta greek symbol" i
\Delta
endsnippet

snippet The "LaTeX Theta greek symbol" i
\Theta
endsnippet

snippet Lam "LaTeX Lambda greek symbol" i
\Lambda
endsnippet

snippet Xi "LaTeX Xi greek symbol" i
\Xi
endsnippet

snippet Xi "LaTeX Xi greek symbol" i
\Xi
endsnippet

snippet Pi "LaTeX Pi greek symbol" i
\Pi
endsnippet

snippet Sig "LaTeX Sigma greek symbol" i
\Sigma
endsnippet

snippet Ups "LaTeX Upsilon greek symbol" i
\Upsilon
endsnippet

snippet Phi "LaTeX Phi greek symbol" i
\Phi
endsnippet

snippet Psi "LaTeX Psi greek symbol" i
\Psi
endsnippet

snippet Ome "LaTeX Omega greek symbol" i
\Omega
endsnippet

# Syntax
# ============================================================

snippet '(\\|!)!' "LaTex small negative spacing" rw
`!p
prefix = match.group(1)
if prefix == '\\':
	snip.rv = '\\!\\!'
elif prefix == '!':
	snip.rv = '\\!'
`
endsnippet

snippet '(\\|,),' "LaTex small spacing" rw
`!p
prefix = match.group(1)
if prefix == '\\':
	snip.rv = '\\,\\,'
elif prefix == ',':
	snip.rv = '\\,'
`
endsnippet

snippet '(\\|:):' "LaTex medium spacing" rw
`!p
prefix = match.group(1)
if prefix == '\\':
	snip.rv = '\\:\\:'
elif prefix == ':':
	snip.rv = '\\:'
`
endsnippet

snippet '(\\|;);' "LaTex large spacing" rw
`!p
prefix = match.group(1)
if prefix == '\\':
	snip.rv = '\\;\\;'
elif prefix == ';':
	snip.rv = '\\;'
`
endsnippet

snippet dis "LaTeX Displaystyle" w
{\displaystyle ${1:${VISUAL}}}$0
endsnippet

snippet xtt "LaTeX text" iA
\text{${1:${VISUAL}}}$0
endsnippet

snippet xtbo "LaTeX text bold" iA
\textbf{${1:${VISUAL}}}$0
endsnippet

snippet xtit "LaTeX text italic" iA
\textit{${1:${VISUAL}}}$0
endsnippet

snippet xsbo "LaTeX symbol bold" iA
\boldsymbol{${1:${VISUAL}}}$0
endsnippet

snippet xmbo "LaTeX math bold" iA
\mathbf{${1:${VISUAL}}}$0
endsnippet

snippet xmit "LaTeX math italic" iA
\mathit{${1:${VISUAL}}}$0
endsnippet

snippet xmca "LaTeX mathcal" iA
\mathcal{$1}$0
endsnippet

snippet xmbb "LaTeX mathbb" iA
\mathbb{$1}$0
endsnippet

snippet pha "LaTeX phantom placeholder" i
\phantom{$1}$0
endsnippet

snippet npha "LaTeX negative phantom placeholder" i
\phantom{-}$0
endsnippet

snippet xsol "LaTeX overline" iA
\overline{${1:${VISUAL}}}$0
endsnippet

snippet xsul "LaTeX underline" iA
\underline{${1:${VISUAL}}}$0
endsnippet

snippet co "Cancel out" w
\cancel{${1:${VISUAL}}}$0
endsnippet

snippet col "LaTeX text color" i
{\color{#${1:ff0000}}{${2:${VISUAL}}}}$0
endsnippet

snippet coc "Cancel out with color" w
{\color{#${1:ff0000}}{\cancel{{\color{#${1:000000}}{${3:${VISUAL}}}}}}}$0
endsnippet

snippet nl "LaTeX empty line" bA
~\\\\
endsnippet

snippet begin "LaTeX begin function" bA
\begin{$1}
	${0:${VISUAL}}
\end{$1}
endsnippet

snippet bmat "LaTeX in-line brackets matrix" wb
\begin{bmatrix} ${1:${VISUAL}} \end{bmatrix}$0
endsnippet

snippet Bmat "LaTeX in-line curly braces matrix" wb
\begin{Bmatrix} ${1:${VISUAL}} \end{Bmatrix}$0
endsnippet

snippet pmat "LaTeX in-line parenthesis matrix" wb
\begin{pmatrix} ${1:${VISUAL}} \end{pmatrix}$0
endsnippet

snippet vmat "LaTeX in-line determinant matrix" wb
\begin{vmatrix} ${1:${VISUAL}} \end{vmatrix}$0
endsnippet

snippet Vmat "LaTeX in-line double absolute values matrix" wb
\begin{Vmatrix} ${1:${VISUAL}} \end{Vmatrix}$0
endsnippet

# Usage: arr[#column],[#row] ->
# \begin{array}{#column}
#   &*[column*row] \\
# \end{array}
post_jump "create_matrix_placeholders(snip)"
snippet '(\d+),(\d+)ar' "LaTeX array" rbA
\begin{array}{`!p
orient = ""
for _ in range(0, int(match.group(1))): orient += "l"
snip.rv = orient`}
`!p
snip.rv = create_matrix(match.group(1), match.group(2), " & ", "\t", " \\\\\\\\\n")
`$0
\end{array}
endsnippet

# Usage: [#column]== ->
# \begin{aligned}
#   &=*[#columng] \\
# \end{array}
post_jump "create_matrix_placeholders(snip)"
snippet '(\d+)eq' "LaTeX block align equations" rbA
\begin{aligned}
`!p
snip.rv = create_matrix(2, match.group(1), " &= ","\t", " \\\\\\\\\n")
`
\end{aligned}$0
endsnippet

# Usage: "i((l or r)or(b))n,nm", where `i` (optional) is the in-line trigger
# either `l or r` (optional) as separators, `b` (optional) as the boundary type
# , and `n,n` as the matrix size (rows, column). No spaces and ignore
# parenthesis, and can't have both separators and boundary together.
post_jump "create_matrix_placeholders(snip)"
snippet '\b(i)?(((l)?(r)?)(b|B|v|V|p?))(\d+),(\d+)(m)?' "LaTeX matrix" wr
`!p
inline = match.group(1)
left = match.group(4) # left matrix separator
right = match.group(5) # right matrix separator
boundary = match.group(6) # boundary type

# Determine if in-line or block
indent = ""
if inline:
	inline = " "
else:
	inline = "\n"
	indent = "\t"

right_bound = "|" if match.group(9) == "m" else "."
if left or right:
	# Left boundary with right separator. Default boundary is "|"
	if left and right == None:
		if boundary:
			left = "\\left" + boundaries[f"{boundary}"][0]
			right = "\\right" + right_bound
		else:
			left = "\\left|"
			right = "\\right" + right_bound
	# Right boundary only
	elif left == None and right:
		if boundary:
			left = "\\left."
			right = "\\right" + boundaries[f"{boundary}"][1]
		else:
			left = "\\left."
			right = "\\right" + right_bound
	# Left and right separator
	elif left and right:
		if boundary:
			left = "\\left" + boundaries[f"{boundary}"][0]
			right = "\\right" + boundaries[f"{boundary}"][1]
		else:
			left = "\\left|"
			right = "\\right" + right_bound
	# Remove boundary
	boundary = ""
elif boundary:
	# No separator
	left = ""
	right = ""
else:
	# No boundary and separator
	left = ""
	right = ""
	boundary = ""
# Matrix size
rows = match.group(7)
cols = match.group(8)
# LaTeX matrix wrapper
begin = left + "\\begin{" + boundary + "matrix}" + inline
end = inline + "\\end{" + boundary + "matrix}" + right
result = "" # result value
placeholder = 1 # placeholder number for snippet jumps

# Matrix entries
result += create_matrix(rows, cols, " & ", indent, " \\\\\\\\" + inline)
snip.rv = begin + result + end
`$0
endsnippet

# Usage:
# item<tab> ->
# item
# item
snippet '(?<=\\item)(.+)' "LaTeX item" r
`!p snip.rv = match.group(1)`
\\item $0
endsnippet

# Usage:
# [number]item
# \begin{itemize}
#   item*[number]
# \end{itemiz}
post_jump "create_matrix_placeholders(snip)"
snippet '(\d+)item' "LaTeX itemize" brA
\begin{itemize}
`!p
res = "\t\\item $1"
if match.group(1):
	res = create_matrix(1, match.group(1), "", "\t\\item ", "\n")
	snip.rv = res
`
\end{itemize}$0
endsnippet

# Usage:
# [number]enum
# \begin{enumerate}
#   item*[number]
# \end{enumerate}
post_jump "create_matrix_placeholders(snip)"
snippet '(\d+)enum' "LaTeX enumerate" brA
\begin{enumerate}
`!p
res = "\t\\item $1"
if match.group(1):
	res = create_matrix(1, match.group(1), "", "\t\\item ", "\n")
	snip.rv = res
`
\end{enumerate}$0
endsnippet

# Usage:
# [number]desc
# \begin{description}
#   item*[number]
# \end{description}
post_jump "create_matrix_placeholders(snip)"
snippet '(\d+)desc' "LaTeX description" brA
\begin{description}
`!p
res = "\t\\item $1"
if match.group(1):
	res = create_matrix(1, match.group(1), "", "\t\\item ", "\n")
	snip.rv = res
`
\end{description}$0
endsnippet





# Brackets
# ============================================================

snippet bg) "LaTeX big parenthesis" iA
\bigl( ${1:${VISUAL}} \bigr)$0
endsnippet

snippet Bg) "LaTeX very big parenthesis" iA
\Bigl( ${1:${VISUAL}} \Bigr)$0
endsnippet

snippet bg] "LaTeX big brackets" iA
\bigl[ ${1:${VISUAL}} \bigr]$0
endsnippet

snippet Bg] "LaTeX big brackets" iA
\Bigl[ ${1:${VISUAL}} \Bigr]$0
endsnippet

snippet bg} "LaTeX very big braces" iA
\bigl\\{ ${1:${VISUAL}} \bigr\\}$0
endsnippet

snippet Bg} "LaTeX very big braces" iA
\Bigl\\{ ${1:${VISUAL}} \Bigr\\}$0
endsnippet

snippet bg| "LaTeX big pipe" iA
\bigl| ${1:${VISUAL}} \bigr|$0
endsnippet

snippet Bg| "LaTeX very big pipe" iA
\Bigl| ${1:${VISUAL}} \Bigr|$0
endsnippet

snippet bg\| "LaTeX big double pipe" iA
\bigl\\| ${1:${VISUAL}} \bigr\\|$0
endsnippet

snippet Bg\| "LaTeX very big double pipe" iA
\Bigl\\| ${1:${VISUAL}} \Bigr\\|$0
endsnippet

snippet bg> "LaTeX angled bracets" iA
\langle ${1:${VISUAL}} \rangle$0
endsnippet

snippet lr) "LaTeX left right parenthesis" iA
\left ( ${1:${VISUAL}} \right )$0
endsnippet

snippet lr] "LaTeX left right brackets" iA
\left [ ${1:${VISUAL}} \right ]$0
endsnippet

snippet lr} "LaTeX left right braces" iA
\left \\{ ${1:${VISUAL}} \right \\}$0
endsnippet

snippet lr| "LaTeX left right pipe" iA
\left | ${1:${VISUAL}} \right |$0
endsnippet

snippet lr\| "LaTeX left right double pipe" iA
\left \| ${1:${VISUAL}} \right \|$0
endsnippet

snippet lr> "LaTeX left right double pipe" iA
\left < ${1:${VISUAL}} \right >$0
endsnippet

# LaTeX specific
# ============================================================

snippet temp "LaTeX basic template" bA
\documentclass[11pt, a4paper]{article}

\usepackage{amsmath, amssymb}
\usepackage{graphicx}

\setlength{\parindent}{2em}
\setlength{\parskip}{0.5em}

\author{$1}
\title{$2}

\begin{document}
\maketitle
\tableofcontents
\newpage

$0
\end{document}
endsnippet

snippet upac "LaTeX usepackage" bA
\usepackage[${1:options}]{${2:package}}$0
endsnippet

snippet img "LaTeX figure environment" bA
\begin{figure}[${1:htpb}]
	\centering
	${2:\includegraphics[width=0.8\linewidth]{$3}}
	\caption{${4:$3}}
	\label{fig:${5:${3/\W+/-/g}}}
\end{figure}
endsnippet

